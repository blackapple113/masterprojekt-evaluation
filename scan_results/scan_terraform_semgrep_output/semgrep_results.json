{
    "errors": [],
    "paths": {
        "_comment": "<add --verbose for a list of skipped paths>",
        "scanned": [
            "terraform/alicloud/bucket.tf",
            "terraform/alicloud/provider.tf",
            "terraform/alicloud/rds.tf",
            "terraform/alicloud/trail.tf",
            "terraform/aws/consts.tf",
            "terraform/aws/db-app.tf",
            "terraform/aws/ec2.tf",
            "terraform/aws/ecr.tf",
            "terraform/aws/eks.tf",
            "terraform/aws/elb.tf",
            "terraform/aws/es.tf",
            "terraform/aws/iam.tf",
            "terraform/aws/kms.tf",
            "terraform/aws/lambda.tf",
            "terraform/aws/neptune.tf",
            "terraform/aws/providers.tf",
            "terraform/aws/rds.tf",
            "terraform/aws/s3.tf",
            "terraform/azure/aks.tf",
            "terraform/azure/app_service.tf",
            "terraform/azure/application_gateway.tf",
            "terraform/azure/instance.tf",
            "terraform/azure/key_vault.tf",
            "terraform/azure/logging.tf",
            "terraform/azure/mssql.tf",
            "terraform/azure/networking.tf",
            "terraform/azure/policies.tf",
            "terraform/azure/provider.tf",
            "terraform/azure/random.tf",
            "terraform/azure/resource_group.tf",
            "terraform/azure/roles.tf",
            "terraform/azure/security_center.tf",
            "terraform/azure/sql.tf",
            "terraform/azure/storage.tf",
            "terraform/azure/variables.tf",
            "terraform/gcp/big_data.tf",
            "terraform/gcp/gcs.tf",
            "terraform/gcp/gke.tf",
            "terraform/gcp/instances.tf",
            "terraform/gcp/networks.tf",
            "terraform/gcp/provider.tf",
            "terraform/gcp/variables.tf",
            "terraform/oracle/bucket.tf",
            "terraform/oracle/compartment.tf",
            "terraform/oracle/data.tf",
            "terraform/oracle/provider.tf",
            "terraform/oracle/variables.tf"
        ]
    },
    "results": [
        {
            "check_id": "terraform.lang.security.ebs-unencrypted-volume.unencrypted-ebs-volume",
            "end": {
                "col": 9,
                "line": 34,
                "offset": 1123
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "ff6bec119190c5cc80dd31b60dd60790dac1a1bb966bff6ae6c5c6c507f1102a2483c0d57cecab643b004fee4f1765807b823c202ba0c8459ed41d9ce5089cba_0",
                "is_ignored": false,
                "lines": "resource \"aws_ebs_volume\" \"web_host_storage\" {",
                "message": "An EBS volume is configured without encryption enabled.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-311: Missing Encryption of Sensitive Data"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A04:2021 - Insecure Design"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A04_2021-Insecure_Design"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "WAUZW5",
                            "url": "https://semgrep.dev/playground/r/NdT171/terraform.lang.security.ebs-unencrypted-volume.unencrypted-ebs-volume",
                            "version_id": "NdT171"
                        }
                    },
                    "shortlink": "https://sg.run/GWdB",
                    "source": "https://semgrep.dev/r/terraform.lang.security.ebs-unencrypted-volume.unencrypted-ebs-volume",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "aws"
                    ],
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ]
                },
                "metavars": {},
                "severity": "WARNING"
            },
            "path": "terraform/aws/ec2.tf",
            "start": {
                "col": 1,
                "line": 34,
                "offset": 1115
            }
        },
        {
            "check_id": "terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket",
            "end": {
                "col": 31,
                "line": 7,
                "offset": 287
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "ebde38a6ff9a2c6154a1adb17d2ea254d0c700f5d2406d7ebe5b033ab4980fb4d7cbef5e0556ba4e297ecf6951b97a8ccf5afdf3ac95242cd880a2ff8fe8e669_0",
                "is_ignored": false,
                "lines": "  acl    = \"public-read-write\"",
                "message": "S3 bucket with public read-write access detected.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
                    ],
                    "cwe2021-top25": true,
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl",
                        "https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "6JUqvn",
                            "url": "https://semgrep.dev/playground/r/PkTYPz/terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket",
                            "version_id": "PkTYPz"
                        }
                    },
                    "shortlink": "https://sg.run/0nok",
                    "source": "https://semgrep.dev/r/terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "aws"
                    ],
                    "vulnerability_class": [
                        "Mishandled Sensitive Information"
                    ]
                },
                "metavars": {},
                "severity": "ERROR"
            },
            "path": "terraform/alicloud/bucket.tf",
            "start": {
                "col": 3,
                "line": 7,
                "offset": 259
            }
        },
        {
            "check_id": "terraform.aws.security.aws-lambda-x-ray-tracing-not-active.aws-lambda-x-ray-tracing-not-active",
            "end": {
                "col": 2,
                "line": 59,
                "offset": 1802
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "3864bce8bc33d754b87acc869dd83c7c6519c591cc7249aa2bc903b16c765a0b235724a3a0541e2d2e15ec5d0ba842ba03bbe81c9d68b48ff9be7aed031db440_0",
                "is_ignored": false,
                "lines": "resource \"aws_lambda_function\" \"analysis_lambda\" {\n  # lambda have plain text secrets in environment variables\n  filename      = \"resources/lambda_function_payload.zip\"\n  function_name = \"${local.resource_prefix.value}-analysis\"\n  role          = \"${aws_iam_role.iam_for_lambda.arn}\"\n  handler       = \"exports.test\"\n\n  source_code_hash = \"${filebase64sha256(\"resources/lambda_function_payload.zip\")}\"\n\n  runtime = \"nodejs12.x\"\n\n  environment {\n    variables = {\n      access_key = \"AKIAIOSFODNN7EXAMPLE\"\n      secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/aws/lambda.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7d8bc47-e5d9-4b09-9d8f-e7b9724d826e\"\n  }\n}",
                "message": "The AWS Lambda function does not have active X-Ray tracing enabled. X-Ray tracing enables end-to-end debugging and analysis of all function activity. This makes it easier to trace the flow of logs and identify bottlenecks, slow downs and timeouts.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-778: Insufficient Logging"
                    ],
                    "impact": "LOW",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": [
                        "A09:2021 Security Logging and Monitoring Failures"
                    ],
                    "references": [
                        "https://cwe.mitre.org/data/definitions/778.html",
                        "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#mode",
                        "https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "eqUl1O",
                            "url": "https://semgrep.dev/playground/r/PkTY9P/terraform.aws.security.aws-lambda-x-ray-tracing-not-active.aws-lambda-x-ray-tracing-not-active",
                            "version_id": "PkTY9P"
                        }
                    },
                    "shortlink": "https://sg.run/wO2Y",
                    "source": "https://semgrep.dev/r/terraform.aws.security.aws-lambda-x-ray-tracing-not-active.aws-lambda-x-ray-tracing-not-active",
                    "subcategory": [
                        "audit"
                    ],
                    "technology": [
                        "aws",
                        "terraform"
                    ],
                    "vulnerability_class": [
                        "Insufficient Logging"
                    ]
                },
                "metavars": {
                    "$ANYTHING": {
                        "abstract_content": "analysis_lambda",
                        "end": {
                            "col": 48,
                            "line": 32,
                            "offset": 834
                        },
                        "start": {
                            "col": 33,
                            "line": 32,
                            "offset": 819
                        }
                    }
                },
                "severity": "INFO"
            },
            "path": "terraform/aws/lambda.tf",
            "start": {
                "col": 1,
                "line": 32,
                "offset": 787
            }
        },
        {
            "check_id": "terraform.azure.security.azure-key-no-expiration-date.azure-key-no-expiration-date",
            "end": {
                "col": 9,
                "line": 33,
                "offset": 1133
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "14852e1e3c1d75f779c50995a6652e74dfe3c337c59aa785710801118cd86082f5cd34dc96f1324e0693b19bbf8c54e11780300f69eae026d83d69219196a751_0",
                "is_ignored": false,
                "lines": "resource \"azurerm_key_vault_key\" \"generated\" {",
                "message": "Ensure that the expiration date is set on all keys",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-320: CWE CATEGORY: Key Management Errors"
                    ],
                    "impact": "LOW",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "0oUlgp",
                            "url": "https://semgrep.dev/playground/r/DkTQlG/terraform.azure.security.azure-key-no-expiration-date.azure-key-no-expiration-date",
                            "version_id": "DkTQlG"
                        }
                    },
                    "shortlink": "https://sg.run/J1vw",
                    "source": "https://semgrep.dev/r/terraform.azure.security.azure-key-no-expiration-date.azure-key-no-expiration-date",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "azure"
                    ],
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ]
                },
                "metavars": {},
                "severity": "WARNING"
            },
            "path": "terraform/azure/key_vault.tf",
            "start": {
                "col": 1,
                "line": 33,
                "offset": 1125
            }
        },
        {
            "check_id": "terraform.azure.security.keyvault.keyvault-ensure-secret-expires.keyvault-ensure-secret-expires",
            "end": {
                "col": 9,
                "line": 58,
                "offset": 1878
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "3ca3927aad2330e6e7a57005cba8c18de9f656537737b7128108193a82a3340858c7221ae1065cce4ab8c15c5ab0c7a48635555192bdec34533a56a3db08189e_0",
                "is_ignored": false,
                "lines": "resource \"azurerm_key_vault_secret\" \"secret\" {",
                "message": "Ensure that the expiration date is set on all secrets",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-262: Not Using Password Aging"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "references": [
                        "https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#expiration_date",
                        "https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "QrUdNy",
                            "url": "https://semgrep.dev/playground/r/ZRTw0A/terraform.azure.security.keyvault.keyvault-ensure-secret-expires.keyvault-ensure-secret-expires",
                            "version_id": "ZRTw0A"
                        }
                    },
                    "shortlink": "https://sg.run/d2RZ",
                    "source": "https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-ensure-secret-expires.keyvault-ensure-secret-expires",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "azure"
                    ],
                    "vulnerability_class": [
                        "Improper Authentication"
                    ]
                },
                "metavars": {},
                "severity": "INFO"
            },
            "path": "terraform/azure/key_vault.tf",
            "start": {
                "col": 1,
                "line": 58,
                "offset": 1870
            }
        },
        {
            "check_id": "terraform.azure.security.keyvault.keyvault-purge-enabled.keyvault-purge-enabled",
            "end": {
                "col": 9,
                "line": 1,
                "offset": 8
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "20d03b2e9488ed49adab9f1dfc96b3cf76a894a8d59435f91db5476695d68105bcc596f84946280fa8abf95a3c53699376849f90266017fb3975500335ac996c_0",
                "is_ignored": false,
                "lines": "resource \"azurerm_key_vault\" \"example\" {",
                "message": "Key vault should have purge protection enabled",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-693: Protection Mechanism Failure"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "MEDIUM",
                    "references": [
                        "https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#purge_protection_enabled",
                        "https://docs.microsoft.com/en-us/azure/key-vault/general/soft-delete-overview#purge-protection"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "3qUjw9",
                            "url": "https://semgrep.dev/playground/r/nWT7XR/terraform.azure.security.keyvault.keyvault-purge-enabled.keyvault-purge-enabled",
                            "version_id": "nWT7XR"
                        }
                    },
                    "shortlink": "https://sg.run/Z4xD",
                    "source": "https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-purge-enabled.keyvault-purge-enabled",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "azure"
                    ],
                    "vulnerability_class": [
                        "Improper Authorization"
                    ]
                },
                "metavars": {},
                "severity": "WARNING"
            },
            "path": "terraform/azure/key_vault.tf",
            "start": {
                "col": 1,
                "line": 1,
                "offset": 0
            }
        },
        {
            "check_id": "terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires",
            "end": {
                "col": 9,
                "line": 33,
                "offset": 1133
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "f01a0cf77b3c72037f6c655645fde1deaf59f1f38eb76d8a1c2ea6a37cd568220e4402395bb9845a59afa36e50a9683b3f0edb7ccb29305756abd7187a6e503c_0",
                "is_ignored": false,
                "lines": "resource \"azurerm_key_vault_key\" \"generated\" {",
                "message": "Ensure that the expiration date is set on all keys",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-262: Not Using Password Aging"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "references": [
                        "https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_key#expiration_date",
                        "https://docs.microsoft.com/en-us/powershell/module/az.keyvault/update-azkeyvaultkey?view=azps-5.8.0#example-1--modify-a-key-to-enable-it--and-set-the-expiration-date-and-tags"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "gxUgXq",
                            "url": "https://semgrep.dev/playground/r/d6TDXg/terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires",
                            "version_id": "d6TDXg"
                        }
                    },
                    "shortlink": "https://sg.run/vq9A",
                    "source": "https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "azure"
                    ],
                    "vulnerability_class": [
                        "Improper Authentication"
                    ]
                },
                "metavars": {},
                "severity": "INFO"
            },
            "path": "terraform/azure/key_vault.tf",
            "start": {
                "col": 1,
                "line": 33,
                "offset": 1125
            }
        },
        {
            "check_id": "terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy",
            "end": {
                "col": 2,
                "line": 18,
                "offset": 875
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "d0288d6e717393852cae48b09055f394b20181f3fc86f75abc1e36688ab4a0934836fdf19c90a41896384ad6465b0683eb7b0ca1e25745070d43ae935d0616f7_0",
                "is_ignored": false,
                "lines": "resource \"azurerm_storage_account\" \"security_storage_account\" {\n  name                      = \"securitystorageaccount-${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name       = azurerm_resource_group.example.name\n  location                  = azurerm_resource_group.example.location\n  account_tier              = \"Standard\"\n  account_replication_type  = \"LRS\"\n  enable_https_traffic_only = true\n  tags = {\n    git_commit           = \"a1d1c1ce31a1bde6dafa188846d90eca82abe5fd\"\n    git_file             = \"terraform/azure/mssql.tf\"\n    git_last_modified_at = \"2022-01-20 05:32:41\"\n    git_last_modified_by = \"28880387+tsmithv11@users.noreply.github.com\"\n    git_modifiers        = \"28880387+tsmithv11\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"4b504d4d-608c-45fe-ae56-807bde6d969f\"\n  }\n}",
                "message": "Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-326: Inadequate Encryption Strength"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "MEDIUM",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "references": [
                        "https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#min_tls_version",
                        "https://docs.microsoft.com/en-us/azure/storage/common/transport-layer-security-configure-minimum-version"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "AbUQdL",
                            "url": "https://semgrep.dev/playground/r/QkTJPK/terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy",
                            "version_id": "QkTJPK"
                        }
                    },
                    "shortlink": "https://sg.run/KXD7",
                    "source": "https://semgrep.dev/r/terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "azure"
                    ],
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ]
                },
                "metavars": {},
                "severity": "ERROR"
            },
            "path": "terraform/azure/mssql.tf",
            "start": {
                "col": 1,
                "line": 1,
                "offset": 0
            }
        },
        {
            "check_id": "terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy",
            "end": {
                "col": 2,
                "line": 60,
                "offset": 2125
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "4f0c8858e5a120d3bdfa2293fdc48434635f71fcead903fbfa465f39bca8dd1a02107996ac0adabe2caa91cf920b68136a6ec700abe44235a5ef20e755b7321a_0",
                "is_ignored": false,
                "lines": "resource \"azurerm_storage_account\" \"example\" {\n  name                     = \"tgsa${var.environment}${random_integer.rnd_int.result}\"\n  resource_group_name      = azurerm_resource_group.example.name\n  location                 = azurerm_resource_group.example.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"GRS\"\n  queue_properties {\n    logging {\n      delete                = false\n      read                  = false\n      write                 = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n    hour_metrics {\n      enabled               = true\n      include_apis          = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n    minute_metrics {\n      enabled               = true\n      include_apis          = true\n      version               = \"1.0\"\n      retention_policy_days = 10\n    }\n  }\n  tags = {\n    git_commit           = \"5c6b5d60a8aa63a5d37e60f15185d13a967f0542\"\n    git_file             = \"terraform/azure/storage.tf\"\n    git_last_modified_at = \"2021-05-02 10:06:10\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"Adin.Ermie/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"23861ff4-c42d-495e-80ac-776c74035f43\"\n  }\n}",
                "message": "Azure Storage currently supports three versions of the TLS protocol: 1.0, 1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0 and TLS 1.1 are still supported for backward compatibility. This check will warn if the minimum TLS is not set to TLS1_2.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-326: Inadequate Encryption Strength"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "MEDIUM",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "references": [
                        "https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#min_tls_version",
                        "https://docs.microsoft.com/en-us/azure/storage/common/transport-layer-security-configure-minimum-version"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "AbUQdL",
                            "url": "https://semgrep.dev/playground/r/QkTJPK/terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy",
                            "version_id": "QkTJPK"
                        }
                    },
                    "shortlink": "https://sg.run/KXD7",
                    "source": "https://semgrep.dev/r/terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "azure"
                    ],
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ]
                },
                "metavars": {},
                "severity": "ERROR"
            },
            "path": "terraform/azure/storage.tf",
            "start": {
                "col": 1,
                "line": 23,
                "offset": 780
            }
        },
        {
            "check_id": "terraform.gcp.security.gcp-cloud-storage-logging.gcp-cloud-storage-logging",
            "end": {
                "col": 2,
                "line": 15,
                "offset": 594
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "d9c0ec5ec0e6a7249c900fee85a398115a0510237a0866b61cf0230be84a342196d123ffd16f76eed21619e0c2a2b3af58ca7d8e7bcc3472645b76ace03b391b_0",
                "is_ignored": false,
                "lines": "resource \"google_storage_bucket\" \"terragoat_website\" {\n  name          = \"terragot-${var.environment}\"\n  location      = var.location\n  force_destroy = true\n  labels = {\n    git_commit           = \"2bdc0871a5f4505be58244029cc6485d45d7bb8e\"\n    git_file             = \"terraform__gcp__gcs_tf\"\n    git_last_modified_at = \"2022-01-19-17-02-27\"\n    git_last_modified_by = \"jameswoolfenden\"\n    git_modifiers        = \"jameswoolfenden__nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"bd00cd2e-f53f-4daf-8d4d-74c47846c1cc\"\n  }\n}",
                "message": "Ensure bucket logs access.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-778: Insufficient Logging"
                    ],
                    "impact": "LOW",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": [
                        "A10:2017 - Insufficient Logging & Monitoring",
                        "A09:2021 - Security Logging and Monitoring Failures"
                    ],
                    "references": [
                        "https://docs.bridgecrew.io/docs/google-cloud-policy-index"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "gxUrdg",
                            "url": "https://semgrep.dev/playground/r/DkTQEG/terraform.gcp.security.gcp-cloud-storage-logging.gcp-cloud-storage-logging",
                            "version_id": "DkTQEG"
                        }
                    },
                    "shortlink": "https://sg.run/5g5D",
                    "source": "https://semgrep.dev/r/terraform.gcp.security.gcp-cloud-storage-logging.gcp-cloud-storage-logging",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "gcp"
                    ],
                    "vulnerability_class": [
                        "Insufficient Logging"
                    ]
                },
                "metavars": {
                    "$ANYTHING": {
                        "abstract_content": "terragoat_website",
                        "end": {
                            "col": 52,
                            "line": 1,
                            "offset": 51
                        },
                        "start": {
                            "col": 35,
                            "line": 1,
                            "offset": 34
                        }
                    }
                },
                "severity": "WARNING"
            },
            "path": "terraform/gcp/gcs.tf",
            "start": {
                "col": 1,
                "line": 1,
                "offset": 0
            }
        },
        {
            "check_id": "terraform.gcp.security.gcp-sql-public-database.gcp-sql-public-database",
            "end": {
                "col": 9,
                "line": 1,
                "offset": 8
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "b0da0374fed993e0f2ee86f48d4f8c40fc7ddd27b5397708e2863cd5a9faffbf252744b7e6a7759615282400e0ee267e03f3f8f812d8f6d6d232fe8872e79ce6_0",
                "is_ignored": false,
                "lines": "resource \"google_sql_database_instance\" \"master_instance\" {",
                "message": "Ensure that Cloud SQL database Instances are not open to the world",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-284: Improper Access Control"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "MEDIUM",
                    "owasp": [
                        "A05:2017 - Broken Access Control",
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "d8U7Ll",
                            "url": "https://semgrep.dev/playground/r/zyT5Ez/terraform.gcp.security.gcp-sql-public-database.gcp-sql-public-database",
                            "version_id": "zyT5Ez"
                        }
                    },
                    "shortlink": "https://sg.run/0Xv5",
                    "source": "https://semgrep.dev/r/terraform.gcp.security.gcp-sql-public-database.gcp-sql-public-database",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "gcp"
                    ],
                    "vulnerability_class": [
                        "Improper Authorization"
                    ]
                },
                "metavars": {},
                "severity": "WARNING"
            },
            "path": "terraform/gcp/big_data.tf",
            "start": {
                "col": 1,
                "line": 1,
                "offset": 0
            }
        },
        {
            "check_id": "terraform.gcp.security.gcp-sql-database-require-ssl.gcp-sql-database-require-ssl",
            "end": {
                "col": 9,
                "line": 1,
                "offset": 8
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "469bda98745d082a4851b9534cced9e44909205076f56f105791c3af02c9ab5755c5c372fbcd8e6c6d9f972367c41e95c7c0df29f4f2f0300a5aff4873040c51_0",
                "is_ignored": false,
                "lines": "resource \"google_sql_database_instance\" \"master_instance\" {",
                "message": "Ensure all Cloud SQL database instance requires all incoming connections to use SSL",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-326: Inadequate Encryption Strength"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "v8Uod5",
                            "url": "https://semgrep.dev/playground/r/o5Tn6q/terraform.gcp.security.gcp-sql-database-require-ssl.gcp-sql-database-require-ssl",
                            "version_id": "o5Tn6q"
                        }
                    },
                    "shortlink": "https://sg.run/W4Yg",
                    "source": "https://semgrep.dev/r/terraform.gcp.security.gcp-sql-database-require-ssl.gcp-sql-database-require-ssl",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "gcp"
                    ],
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ]
                },
                "metavars": {},
                "severity": "WARNING"
            },
            "path": "terraform/gcp/big_data.tf",
            "start": {
                "col": 1,
                "line": 1,
                "offset": 0
            }
        },
        {
            "check_id": "terraform.lang.security.ec2-imdsv1-optional.ec2-imdsv1-optional",
            "end": {
                "col": 2,
                "line": 413,
                "offset": 11952
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "3e756b616335d12569565b02df255298d207a29a1a001dbcb5b9dd93ee220469122aa74ddb9a50c223a6a14c3ca5e0a23730eb5cc85c2190f3abff93c009faa7_0",
                "is_ignored": false,
                "lines": "resource \"aws_instance\" \"db_app\" {\n  # ec2 have plain text secrets in user data\n  ami                  = data.aws_ami.amazon-linux-2.id\n  instance_type        = \"t2.nano\"\n  iam_instance_profile = aws_iam_instance_profile.ec2profile.name\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\n### Config from https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateWebServer.html\nsudo yum -y update\nsudo yum -y install httpd php php-mysqlnd\nsudo systemctl enable httpd \nsudo systemctl start httpd\n\nsudo mkdir /var/www/inc\ncat << EnD > /tmp/dbinfo.inc\n<?php\ndefine('DB_SERVER', '${aws_db_instance.default.endpoint}');\ndefine('DB_USERNAME', '${aws_db_instance.default.username}');\ndefine('DB_PASSWORD', '${var.password}');\ndefine('DB_DATABASE', '${aws_db_instance.default.name}');\n?>\nEnD\nsudo mv /tmp/dbinfo.inc /var/www/inc \nsudo chown root:root /var/www/inc/dbinfo.inc\n\ncat << EnD > /tmp/index.php\n<?php include \"../inc/dbinfo.inc\"; ?>\n<html>\n<body>\n<h1>Sample page</h1>\n<?php\n\n  /* Connect to MySQL and select the database. */\n  \\$connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);\n\n  if (mysqli_connect_errno()) echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n\n  \\$database = mysqli_select_db(\\$connection, DB_DATABASE);\n\n  /* Ensure that the EMPLOYEES table exists. */\n  VerifyEmployeesTable(\\$connection, DB_DATABASE);\n\n  /* If input fields are populated, add a row to the EMPLOYEES table. */\n  \\$employee_name = htmlentities(\\$_POST['NAME']);\n  \\$employee_address = htmlentities(\\$_POST['ADDRESS']);\n\n  if (strlen(\\$employee_name) || strlen(\\$employee_address)) {\n    AddEmployee(\\$connection, \\$employee_name, \\$employee_address);\n  }\n?>\n\n<!-- Input form -->\n<form action=\"<?PHP echo \\$_SERVER['SCRIPT_NAME'] ?>\" method=\"POST\">\n  <table border=\"0\">\n    <tr>\n      <td>NAME</td>\n      <td>ADDRESS</td>\n    </tr>\n    <tr>\n      <td>\n        <input type=\"text\" name=\"NAME\" maxlength=\"45\" size=\"30\" />\n      </td>\n      <td>\n        <input type=\"text\" name=\"ADDRESS\" maxlength=\"90\" size=\"60\" />\n      </td>\n      <td>\n        <input type=\"submit\" value=\"Add Data\" />\n      </td>\n    </tr>\n  </table>\n</form>\n\n<!-- Display table data. -->\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n  <tr>\n    <td>ID</td>\n    <td>NAME</td>\n    <td>ADDRESS</td>\n  </tr>\n\n<?php\n\n\\$result = mysqli_query(\\$connection, \"SELECT * FROM EMPLOYEES\");\n\nwhile(\\$query_data = mysqli_fetch_row(\\$result)) {\n  echo \"<tr>\";\n  echo \"<td>\",\\$query_data[0], \"</td>\",\n       \"<td>\",\\$query_data[1], \"</td>\",\n       \"<td>\",\\$query_data[2], \"</td>\";\n  echo \"</tr>\";\n}\n?>\n\n</table>\n\n<!-- Clean up. -->\n<?php\n\n  mysqli_free_result(\\$result);\n  mysqli_close(\\$connection);\n\n?>\n\n</body>\n</html>\n\n\n<?php\n\n/* Add an employee to the table. */\nfunction AddEmployee(\\$connection, \\$name, \\$address) {\n   \\$n = mysqli_real_escape_string(\\$connection, \\$name);\n   \\$a = mysqli_real_escape_string(\\$connection, \\$address);\n\n   \\$query = \"INSERT INTO EMPLOYEES (NAME, ADDRESS) VALUES ('\\$n', '\\$a');\";\n\n   if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error adding employee data.</p>\");\n}\n\n/* Check whether the table exists and, if not, create it. */\nfunction VerifyEmployeesTable(\\$connection, \\$dbName) {\n  if(!TableExists(\"EMPLOYEES\", \\$connection, \\$dbName))\n  {\n     \\$query = \"CREATE TABLE EMPLOYEES (\n         ID int(11) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n         NAME VARCHAR(45),\n         ADDRESS VARCHAR(90)\n       )\";\n\n     if(!mysqli_query(\\$connection, \\$query)) echo(\"<p>Error creating table.</p>\");\n  }\n}\n\n/* Check for the existence of a table. */\nfunction TableExists(\\$tableName, \\$connection, \\$dbName) {\n  \\$t = mysqli_real_escape_string(\\$connection, \\$tableName);\n  \\$d = mysqli_real_escape_string(\\$connection, \\$dbName);\n\n  \\$checktable = mysqli_query(\\$connection,\n      \"SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '\\$t' AND TABLE_SCHEMA = '\\$d'\");\n\n  if(mysqli_num_rows(\\$checktable) > 0) return true;\n\n  return false;\n}\n?>               \nEnD\n\nsudo mv /tmp/index.php /var/www/html\nsudo chown root:root /var/www/html/index.php\n\n\n\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-dbapp\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"f7999d4e-c983-43ee-bd88-7903a6f8483e\"\n  })\n}",
                "message": "AWS EC2 Instance allowing use of the IMDSv1",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-918: Server-Side Request Forgery (SSRF)"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": [
                        "A10:2021 - Server-Side Request Forgery (SSRF)"
                    ],
                    "references": [
                        "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service",
                        "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "GdU0eA",
                            "url": "https://semgrep.dev/playground/r/kbT71A/terraform.lang.security.ec2-imdsv1-optional.ec2-imdsv1-optional",
                            "version_id": "kbT71A"
                        }
                    },
                    "shortlink": "https://sg.run/J3BQ",
                    "source": "https://semgrep.dev/r/terraform.lang.security.ec2-imdsv1-optional.ec2-imdsv1-optional",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "aws"
                    ],
                    "vulnerability_class": [
                        "Server-Side Request Forgery (SSRF)"
                    ]
                },
                "metavars": {
                    "$NAME": {
                        "abstract_content": "db_app",
                        "end": {
                            "col": 32,
                            "line": 243,
                            "offset": 7294
                        },
                        "start": {
                            "col": 26,
                            "line": 243,
                            "offset": 7288
                        }
                    }
                },
                "severity": "ERROR"
            },
            "path": "terraform/aws/db-app.tf",
            "start": {
                "col": 1,
                "line": 243,
                "offset": 7263
            }
        },
        {
            "check_id": "terraform.lang.security.ec2-imdsv1-optional.ec2-imdsv1-optional",
            "end": {
                "col": 2,
                "line": 32,
                "offset": 1113
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "9322aa88db7db5f8ad8a725f51b443c029e2431a06c34bbadc257d297ab2066caa819ff1414fd74c496f3968382e8d275f20f234510c097e143bcf91fcf30c38_0",
                "is_ignored": false,
                "lines": "resource \"aws_instance\" \"web_host\" {\n  # ec2 have plain text secrets in user data\n  ami           = \"${var.ami}\"\n  instance_type = \"t2.nano\"\n\n  vpc_security_group_ids = [\n  \"${aws_security_group.web-node.id}\"]\n  subnet_id = \"${aws_subnet.web_subnet.id}\"\n  user_data = <<EOF\n#! /bin/bash\nsudo apt-get update\nsudo apt-get install -y apache2\nsudo systemctl start apache2\nsudo systemctl enable apache2\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMAAA\nexport AWS_SECRET_ACCESS_KEY=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\nexport AWS_DEFAULT_REGION=us-west-2\necho \"<h1>Deployed via Terraform</h1>\" | sudo tee /var/www/html/index.html\nEOF\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-ec2\"\n    }, {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"347af3cd-4f70-4632-aca3-4d5e30ffc0b6\"\n  })\n}",
                "message": "AWS EC2 Instance allowing use of the IMDSv1",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-918: Server-Side Request Forgery (SSRF)"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": [
                        "A10:2021 - Server-Side Request Forgery (SSRF)"
                    ],
                    "references": [
                        "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service",
                        "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "GdU0eA",
                            "url": "https://semgrep.dev/playground/r/kbT71A/terraform.lang.security.ec2-imdsv1-optional.ec2-imdsv1-optional",
                            "version_id": "kbT71A"
                        }
                    },
                    "shortlink": "https://sg.run/J3BQ",
                    "source": "https://semgrep.dev/r/terraform.lang.security.ec2-imdsv1-optional.ec2-imdsv1-optional",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "terraform",
                        "aws"
                    ],
                    "vulnerability_class": [
                        "Server-Side Request Forgery (SSRF)"
                    ]
                },
                "metavars": {
                    "$NAME": {
                        "abstract_content": "web_host",
                        "end": {
                            "col": 34,
                            "line": 1,
                            "offset": 33
                        },
                        "start": {
                            "col": 26,
                            "line": 1,
                            "offset": 25
                        }
                    }
                },
                "severity": "ERROR"
            },
            "path": "terraform/aws/ec2.tf",
            "start": {
                "col": 1,
                "line": 1,
                "offset": 0
            }
        },
        {
            "check_id": "terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention",
            "end": {
                "col": 2,
                "line": 42,
                "offset": 1518
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "c0062f643f352c32da4baabee2c18a9305611c5dc42d018ef4d40808c0ad24eea4514c755005a80f5e8538144a7c6cbfbca075e781361be73d1af110d9dc900b_0",
                "is_ignored": false,
                "lines": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}",
                "message": "The AWS RDS has no retention. Missing retention can cause losing important event information. To fix this, set a `backup_retention_period`.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-320: CWE CATEGORY: Key Management Errors"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "MEDIUM",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "GdUzwQ",
                            "url": "https://semgrep.dev/playground/r/RGTb8l/terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention",
                            "version_id": "RGTb8l"
                        }
                    },
                    "shortlink": "https://sg.run/OyYB",
                    "source": "https://semgrep.dev/r/terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "aws",
                        "terraform"
                    ],
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ]
                },
                "metavars": {
                    "$ANYTHING": {
                        "abstract_content": "default",
                        "end": {
                            "col": 36,
                            "line": 1,
                            "offset": 35
                        },
                        "start": {
                            "col": 29,
                            "line": 1,
                            "offset": 28
                        }
                    }
                },
                "severity": "WARNING"
            },
            "path": "terraform/aws/db-app.tf",
            "start": {
                "col": 1,
                "line": 1,
                "offset": 0
            }
        },
        {
            "check_id": "terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention",
            "end": {
                "col": 2,
                "line": 15,
                "offset": 566
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "cd1af55ca6b6775c6bdfb6e12d5d5743929c346b51c43f28f202cce871d7dded9e0cefd142e277f9b535b11f520b3ae80512de4cba3e90816c2a10bae81c613e_0",
                "is_ignored": false,
                "lines": "resource \"aws_rds_cluster\" \"app1-rds-cluster\" {\n  cluster_identifier      = \"app1-rds-cluster\"\n  allocated_storage       = 10\n  backup_retention_period = 0\n  tags = {\n    git_commit           = \"079fe74f6b96d887c245664fbd8cf676c92f20e5\"\n    git_file             = \"terraform/aws/rds.tf\"\n    git_last_modified_at = \"2021-12-08 23:26:32\"\n    git_last_modified_by = \"tron47@gmail.com\"\n    git_modifiers        = \"tron47\"\n    git_org              = \"matansha\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"b6f2c2ec-0715-46a0-83d4-502e588826d1\"\n  }\n}",
                "message": "The AWS RDS has no retention. Missing retention can cause losing important event information. To fix this, set a `backup_retention_period`.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-320: CWE CATEGORY: Key Management Errors"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "MEDIUM",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "GdUzwQ",
                            "url": "https://semgrep.dev/playground/r/RGTb8l/terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention",
                            "version_id": "RGTb8l"
                        }
                    },
                    "shortlink": "https://sg.run/OyYB",
                    "source": "https://semgrep.dev/r/terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "aws",
                        "terraform"
                    ],
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ]
                },
                "metavars": {
                    "$ANYTHING": {
                        "abstract_content": "app1-rds-cluster",
                        "end": {
                            "col": 45,
                            "line": 1,
                            "offset": 44
                        },
                        "start": {
                            "col": 29,
                            "line": 1,
                            "offset": 28
                        }
                    }
                },
                "severity": "WARNING"
            },
            "path": "terraform/aws/rds.tf",
            "start": {
                "col": 1,
                "line": 1,
                "offset": 0
            }
        },
        {
            "check_id": "terraform.aws.security.aws-kms-no-rotation.aws-kms-no-rotation",
            "end": {
                "col": 2,
                "line": 16,
                "offset": 591
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "29d3e896c73d8dd3767b387a9e8e31f9a562855641def14072343612b8c93c79727b55cff6779f5960b63843ce447b2f0753288226f9d67bb634ec47622c900d_0",
                "is_ignored": false,
                "lines": "resource \"aws_kms_key\" \"logs_key\" {\n  # key does not have rotation enabled\n  description = \"${local.resource_prefix.value}-logs bucket key\"\n\n  deletion_window_in_days = 7\n  tags = {\n    git_commit           = \"d68d2897add9bc2203a5ed0632a5cdd8ff8cefb0\"\n    git_file             = \"terraform/aws/kms.tf\"\n    git_last_modified_at = \"2020-06-16 14:46:24\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"cd8fa2a7-4868-4cd1-993d-da4644808ce5\"\n  }\n}",
                "message": "The AWS KMS has no rotation. Missing rotation can cause leaked key to be used by attackers. To fix this, set a `enable_key_rotation`.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-326: Inadequate Encryption Strength"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "MEDIUM",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A02:2021 - Cryptographic Failures"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A02_2021-Cryptographic_Failures"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "PeU0L3",
                            "url": "https://semgrep.dev/playground/r/gETqzj/terraform.aws.security.aws-kms-no-rotation.aws-kms-no-rotation",
                            "version_id": "gETqzj"
                        }
                    },
                    "shortlink": "https://sg.run/kz47",
                    "source": "https://semgrep.dev/r/terraform.aws.security.aws-kms-no-rotation.aws-kms-no-rotation",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "aws",
                        "terraform"
                    ],
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ]
                },
                "metavars": {
                    "$ANYTHING": {
                        "abstract_content": "logs_key",
                        "end": {
                            "col": 33,
                            "line": 1,
                            "offset": 32
                        },
                        "start": {
                            "col": 25,
                            "line": 1,
                            "offset": 24
                        }
                    }
                },
                "severity": "WARNING"
            },
            "path": "terraform/aws/kms.tf",
            "start": {
                "col": 1,
                "line": 1,
                "offset": 0
            }
        },
        {
            "check_id": "terraform.aws.security.aws-db-instance-no-logging.aws-db-instance-no-logging",
            "end": {
                "col": 2,
                "line": 42,
                "offset": 1518
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "1debbaf8cba8ebc7de2920505745ad025fe65ef73a811df3db92606d870b783655250977ad79ab93578e42b207e86d0079e9e51df3061b9990589057c1c51e54_0",
                "is_ignored": false,
                "lines": "resource \"aws_db_instance\" \"default\" {\n\n  name                   = var.dbname\n  engine                 = \"mysql\"\n  option_group_name      = aws_db_option_group.default.name\n  parameter_group_name   = aws_db_parameter_group.default.name\n  db_subnet_group_name   = aws_db_subnet_group.default.name\n  vpc_security_group_ids = [\"${aws_security_group.default.id}\"]\n\n  identifier              = \"rds-${local.resource_prefix.value}\"\n  engine_version          = \"8.0\" # Latest major version \n  instance_class          = \"db.t3.micro\"\n  allocated_storage       = \"20\"\n  username                = \"admin\"\n  password                = var.password\n  apply_immediately       = true\n  multi_az                = false\n  backup_retention_period = 0\n  storage_encrypted       = false\n  skip_final_snapshot     = true\n  monitoring_interval     = 0\n  publicly_accessible     = true\n\n  tags = merge({\n    Name        = \"${local.resource_prefix.value}-rds\"\n    Environment = local.resource_prefix.value\n    }, {\n    git_commit           = \"e6d83b21346fe85d4fe28b16c0b2f1e0662eb1d7\"\n    git_file             = \"terraform/aws/db-app.tf\"\n    git_last_modified_at = \"2023-04-27 12:47:51\"\n    git_last_modified_by = \"nadler@paloaltonetworks.com\"\n    git_modifiers        = \"nadler/nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"47c13290-c2ce-48a7-b666-1b0085effb92\"\n  })\n\n  # Ignore password changes from tf plan diff\n  lifecycle {\n    ignore_changes = [\"password\"]\n  }\n}",
                "message": "Database instance has no logging. Missing logs can cause missing important event information.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-311: Missing Encryption of Sensitive Data"
                    ],
                    "impact": "LOW",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "MEDIUM",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A04:2021 - Insecure Design"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A04_2021-Insecure_Design"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "d8U4RA",
                            "url": "https://semgrep.dev/playground/r/JdTqBr/terraform.aws.security.aws-db-instance-no-logging.aws-db-instance-no-logging",
                            "version_id": "JdTqBr"
                        }
                    },
                    "shortlink": "https://sg.run/GyAp",
                    "source": "https://semgrep.dev/r/terraform.aws.security.aws-db-instance-no-logging.aws-db-instance-no-logging",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "aws",
                        "terraform"
                    ],
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ]
                },
                "metavars": {
                    "$ANYTHING": {
                        "abstract_content": "default",
                        "end": {
                            "col": 36,
                            "line": 1,
                            "offset": 35
                        },
                        "start": {
                            "col": 29,
                            "line": 1,
                            "offset": 28
                        }
                    }
                },
                "severity": "WARNING"
            },
            "path": "terraform/aws/db-app.tf",
            "start": {
                "col": 1,
                "line": 1,
                "offset": 0
            }
        },
        {
            "check_id": "terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials",
            "end": {
                "col": 57,
                "line": 11,
                "offset": 255
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "2ded744437f29a8f579ea9fb1f21993417f626663b09055356d2c211c159961f72350925d479af6855459953d249893fea0b8ed698d304cd408e35557f99a3e7_0",
                "is_ignored": false,
                "lines": "  secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"",
                "message": "A hard-coded credential was detected. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module).",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-798: Use of Hard-coded Credentials"
                    ],
                    "cwe2021-top25": true,
                    "cwe2022-top25": true,
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "MEDIUM",
                    "owasp": [
                        "A07:2021 - Identification and Authentication Failures"
                    ],
                    "references": [
                        "https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "d8U4n0",
                            "url": "https://semgrep.dev/playground/r/GxT23e/terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials",
                            "version_id": "GxT23e"
                        }
                    },
                    "shortlink": "https://sg.run/L3kn",
                    "source": "https://semgrep.dev/r/terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials",
                    "subcategory": [
                        "vuln"
                    ],
                    "technology": [
                        "secrets",
                        "aws",
                        "terraform"
                    ],
                    "vulnerability_class": [
                        "Hard-coded Secrets"
                    ]
                },
                "metavars": {
                    "$SECRET": {
                        "abstract_content": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
                        "end": {
                            "col": 57,
                            "line": 11,
                            "offset": 255
                        },
                        "start": {
                            "col": 17,
                            "line": 11,
                            "offset": 215
                        }
                    }
                },
                "severity": "WARNING"
            },
            "path": "terraform/aws/providers.tf",
            "start": {
                "col": 17,
                "line": 11,
                "offset": 215
            }
        },
        {
            "check_id": "terraform.aws.security.aws-ebs-volume-unencrypted.aws-ebs-volume-unencrypted",
            "end": {
                "col": 2,
                "line": 51,
                "offset": 1823
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "3fb57b9897abbc36b7c3d14c2b6c674e69e0446518fbb4960d09cb468da1fa5fd23f6e747cce01eaffd6534693f0d14aa4d3fcf6f0c7dcdef3407c1e4533ae98_0",
                "is_ignored": false,
                "lines": "resource \"aws_ebs_volume\" \"web_host_storage\" {\n  # unencrypted volume\n  availability_zone = \"${var.region}a\"\n  #encrypted         = false  # Setting this causes the volume to be recreated on apply \n  size = 1\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-ebs\"\n    }, {\n    git_commit           = \"d3439f0f2af62f6fa3521e14d6c27819ef8f12e1\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2021-05-02 11:17:26\"\n    git_last_modified_by = \"nimrodkor@users.noreply.github.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"c5509daf-10f0-46af-9e03-41989212521d\"\n  })\n}",
                "message": "The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived snapshots could be read if compromised. Volumes should be encrypted to ensure sensitive data is stored securely.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-311: Missing Encryption of Sensitive Data"
                    ],
                    "impact": "HIGH",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "MEDIUM",
                    "owasp": [
                        "A03:2017 - Sensitive Data Exposure",
                        "A04:2021 - Insecure Design"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A04_2021-Insecure_Design",
                        "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted",
                        "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "YGUKl1",
                            "url": "https://semgrep.dev/playground/r/K3TlDN/terraform.aws.security.aws-ebs-volume-unencrypted.aws-ebs-volume-unencrypted",
                            "version_id": "K3TlDN"
                        }
                    },
                    "shortlink": "https://sg.run/6ZbY",
                    "source": "https://semgrep.dev/r/terraform.aws.security.aws-ebs-volume-unencrypted.aws-ebs-volume-unencrypted",
                    "subcategory": [
                        "audit"
                    ],
                    "technology": [
                        "terraform",
                        "aws"
                    ],
                    "vulnerability_class": [
                        "Cryptographic Issues"
                    ]
                },
                "metavars": {
                    "$ANYTHING": {
                        "abstract_content": "web_host_storage",
                        "end": {
                            "col": 44,
                            "line": 34,
                            "offset": 1158
                        },
                        "start": {
                            "col": 28,
                            "line": 34,
                            "offset": 1142
                        }
                    }
                },
                "severity": "WARNING"
            },
            "path": "terraform/aws/ec2.tf",
            "start": {
                "col": 1,
                "line": 34,
                "offset": 1115
            }
        },
        {
            "check_id": "terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address",
            "end": {
                "col": 2,
                "line": 153,
                "offset": 5050
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "e0dc22d44a98e2444ad89e11e7f31b54c4f33f976b5e0bd6f5a1e40bc6cbfcb2f038f36a5d78bef6f9945ee5200f07e7dc5463fe575414edabf949deec2a04eb_0",
                "is_ignored": false,
                "lines": "resource \"aws_subnet\" \"web_subnet\" {\n  vpc_id                  = aws_vpc.web_vpc.id\n  cidr_block              = \"172.16.10.0/24\"\n  availability_zone       = \"${var.region}a\"\n  map_public_ip_on_launch = true\n\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-subnet\"\n    }, {\n    git_commit           = \"6e62522d2ab8f63740e53752b84a6e99cd65696a\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2021-05-02 11:16:31\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"0345f650-d280-4ca8-86c9-c71c38c0eda8\"\n  })\n}",
                "message": "Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-284: Improper Access Control"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
                        "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet#map_public_ip_on_launch",
                        "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "2ZUo79",
                            "url": "https://semgrep.dev/playground/r/o5Tnve/terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address",
                            "version_id": "o5Tnve"
                        }
                    },
                    "shortlink": "https://sg.run/XJZw",
                    "source": "https://semgrep.dev/r/terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address",
                    "subcategory": [
                        "audit"
                    ],
                    "technology": [
                        "terraform",
                        "aws"
                    ],
                    "vulnerability_class": [
                        "Improper Authorization"
                    ]
                },
                "metavars": {
                    "$ANYTHING": {
                        "abstract_content": "web_subnet",
                        "end": {
                            "col": 34,
                            "line": 135,
                            "offset": 4388
                        },
                        "start": {
                            "col": 24,
                            "line": 135,
                            "offset": 4378
                        }
                    }
                },
                "severity": "WARNING"
            },
            "path": "terraform/aws/ec2.tf",
            "start": {
                "col": 1,
                "line": 135,
                "offset": 4355
            }
        },
        {
            "check_id": "terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address",
            "end": {
                "col": 2,
                "line": 173,
                "offset": 5749
            },
            "extra": {
                "engine_kind": "OSS",
                "fingerprint": "d2f1e893da421a94dc7d5116afc9ec127375c8c6b86452db896b7d1a25195f5cd9df5ba162ed62d9e99246f0dd040b476d41c052f49136b59d5ccba50d500524_0",
                "is_ignored": false,
                "lines": "resource \"aws_subnet\" \"web_subnet2\" {\n  vpc_id                  = aws_vpc.web_vpc.id\n  cidr_block              = \"172.16.11.0/24\"\n  availability_zone       = \"${var.region}b\"\n  map_public_ip_on_launch = true\n\n  tags = merge({\n    Name = \"${local.resource_prefix.value}-subnet2\"\n    }, {\n    git_commit           = \"6e62522d2ab8f63740e53752b84a6e99cd65696a\"\n    git_file             = \"terraform/aws/ec2.tf\"\n    git_last_modified_at = \"2021-05-02 11:16:31\"\n    git_last_modified_by = \"nimrodkor@gmail.com\"\n    git_modifiers        = \"nimrodkor\"\n    git_org              = \"bridgecrewio\"\n    git_repo             = \"terragoat\"\n    yor_trace            = \"224af03a-00e0-4981-be30-14965833c2db\"\n  })\n}",
                "message": "Resources in the AWS subnet are assigned a public IP address. Resources should not be exposed on the public internet, but should have access limited to consumers required for the function of your application. Set `map_public_ip_on_launch` to false so that resources are not publicly-accessible.",
                "metadata": {
                    "category": "security",
                    "confidence": "MEDIUM",
                    "cwe": [
                        "CWE-284: Improper Access Control"
                    ],
                    "impact": "MEDIUM",
                    "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]",
                    "likelihood": "LOW",
                    "owasp": [
                        "A01:2021 - Broken Access Control"
                    ],
                    "references": [
                        "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
                        "https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet#map_public_ip_on_launch",
                        "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses"
                    ],
                    "semgrep.dev": {
                        "rule": {
                            "origin": "community",
                            "rule_id": "2ZUo79",
                            "url": "https://semgrep.dev/playground/r/o5Tnve/terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address",
                            "version_id": "o5Tnve"
                        }
                    },
                    "shortlink": "https://sg.run/XJZw",
                    "source": "https://semgrep.dev/r/terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address",
                    "subcategory": [
                        "audit"
                    ],
                    "technology": [
                        "terraform",
                        "aws"
                    ],
                    "vulnerability_class": [
                        "Improper Authorization"
                    ]
                },
                "metavars": {
                    "$ANYTHING": {
                        "abstract_content": "web_subnet2",
                        "end": {
                            "col": 35,
                            "line": 155,
                            "offset": 5086
                        },
                        "start": {
                            "col": 24,
                            "line": 155,
                            "offset": 5075
                        }
                    }
                },
                "severity": "WARNING"
            },
            "path": "terraform/aws/ec2.tf",
            "start": {
                "col": 1,
                "line": 155,
                "offset": 5052
            }
        }
    ],
    "version": "1.31.2"
}